feature_set fsET = FeatureSet(features=(${featuresTlinkType.feventToken}, 
										${featuresTlinkType.feventPos},
										${featuresTlinkType.feventPosB},
										${featuresTlinkType.feventPosBI},
										${featuresTlinkType.feventTense}, 
										${featuresTlinkType.feventAspect}, 
										${featuresTlinkType.feventClass}, 
										${featuresTlinkType.feventLemma}, 
										${featuresTlinkType.feventSynset},
										${featuresTlinkType.feventSentPos},
										${featuresTlinkType.feventPrep},
										${featuresTlinkType.feventSentPosPos},
										${featuresTlinkType.ftimeToken}, 
										${featuresTlinkType.ftimeTokenh}, 
										${featuresTlinkType.ftimeSentPos}, 
										${featuresTlinkType.feventTimeToken}, 
										${featuresTlinkType.ftokenPathET}, 
										${featuresTlinkType.fdepPathET}, 
										${featuresTlinkType.fconPathET}, 
										${featuresTlinkType.fconPathPosET},
										${featuresTlinkType.fdepTypeET},
										${featuresTlinkType.fdomET},
										${featuresTlinkType.foverEventET},
										${featuresTlinkType.fsourceType}), 
								initData=(${dataTlinkTypeTBD.trainDataET}));

feature_set fsEE = FeatureSet(features=(${featuresTlinkType.fsToken}, 
										${featuresTlinkType.fsPos}, 
										${featuresTlinkType.fsPosB}, 
										${featuresTlinkType.fsPosBI},
										${featuresTlinkType.fsTense}, 
										${featuresTlinkType.fsAspect}, 
										${featuresTlinkType.fsClass}, 
										${featuresTlinkType.fsPolarity}, 
										${featuresTlinkType.fsModality}, 
										${featuresTlinkType.fsLemma}, 
										${featuresTlinkType.fsSynset},
										${featuresTlinkType.fsSentPos},
										${featuresTlinkType.fsPrep},
										${featuresTlinkType.fsSentPosPos},
										${featuresTlinkType.ftToken},  
										${featuresTlinkType.ftPos}, 
										${featuresTlinkType.ftPosB}, 
										${featuresTlinkType.ftPosBI}, 
										${featuresTlinkType.ftTense},
										${featuresTlinkType.ftAspect}, 
										${featuresTlinkType.ftClass}, 
										${featuresTlinkType.ftPolarity}, 
										${featuresTlinkType.ftModality},
										${featuresTlinkType.ftLemma}, 
										${featuresTlinkType.ftSynset},
										${featuresTlinkType.ftSentPos},
										${featuresTlinkType.ftPrep},
										${featuresTlinkType.ftSentPosPos},
										${featuresTlinkType.fstToken}, 
										${featuresTlinkType.fstPos}, 
										${featuresTlinkType.fstTense}, 
										${featuresTlinkType.fstAspect}, 
										${featuresTlinkType.fstClass}, 
										${featuresTlinkType.fstPolarity}, 
										${featuresTlinkType.fstModality},
										${featuresTlinkType.fstPosEq}, 
										${featuresTlinkType.fstTenseEq}, 
										${featuresTlinkType.fstAspectEq}, 
										${featuresTlinkType.fstClassEq}, 
										${featuresTlinkType.fstPolarityEq}, 
										${featuresTlinkType.fstModalityEq},
										${featuresTlinkType.fdepPathEE}, 
										${featuresTlinkType.fconPathEE}, 
										${featuresTlinkType.fconPathPosEE}, 
										${featuresTlinkType.fdepTypeEE},
										${featuresTlinkType.foverEventEE}, 
										${featuresTlinkType.fdomEE}), 
						initData=(${dataTlinkTypeTBD.trainDataEE}));

feature_set fsDCT = FeatureSet(features=(${featuresTlinkType.feventToken},
										 ${featuresTlinkType.feventTokenBA},
										 ${featuresTlinkType.feventPos},
										 ${featuresTlinkType.feventPosB}, 
										 ${featuresTlinkType.feventPosBI},  
										 ${featuresTlinkType.feventTense}, 
										 ${featuresTlinkType.feventAspect}, 
										 ${featuresTlinkType.feventClass},   
										 ${featuresTlinkType.feventModality}, 
										 ${featuresTlinkType.feventPolarity},
										 ${featuresTlinkType.feventLemma}, 
										 ${featuresTlinkType.feventSynset},
										 ${featuresTlinkType.feventSentPos},
										 ${featuresTlinkType.feventSentPosPos}), 
						initData=(${dataTlinkTypeTBD.trainDataDCT}));

data_features trainMatrixDCT = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataDCT}, features=${fsDCT});
data_features trainMatrixETWS = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataETWS}, features=${fsET});
data_features trainMatrixETBS = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataETBS}, features=${fsET});
data_features trainMatrixEEWS = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataEEWS}, features=${fsEE});
data_features trainMatrixEEBS = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataEEBS}, features=${fsEE});
data_features trainMatrixEED = DataFeatureMatrix(data=${dataTlinkTypeTBD.trainDataEED}, features=${fsEE});

model yadll=YADLL(numEpochs="40", stepSize=".5", 
				  fnNodes=("Softmax", "NegativeLogLoss"), 
				  fnParameters=("Zeros", "Zeros"), 
				  Softmax_0_input="Zeros_0*x+Zeros_1", 
				  Softmax_0_size=${labelsTlinkTypeTBD.count}, 
				  NegativeLogLoss_1_input="Softmax_0", 
				  NegativeLogLoss_1_size="1", 
				  targetFnNode="Softmax_0",
				  lossFnNode="NegativeLogLoss_1") {
	array validLabels=${labelsTlinkTypeTBD.labels};
};

search yadllSearch=Grid() {
	dimension numEpochs=Enumerated(values=("50", "100", "150", "200"), stageIndex="0");
};

search yadllDCTSearch = CloneSearch(search=${yadllSearch});
search yadllETWSSearch = CloneSearch(search=${yadllSearch});
search yadllETBSSearch = CloneSearch(search=${yadllSearch});
search yadllEEWSSearch = CloneSearch(search=${yadllSearch});
search yadllEEBSSearch = CloneSearch(search=${yadllSearch});
search yadllEEDSearch = CloneSearch(search=${yadllSearch});

evaluation acc=Accuracy();
classify_method yadllDCTUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixDCT}, trainEvaluation=${acc});
classify_method yadllETWSUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixETWS}, trainEvaluation=${acc});
classify_method yadllETBSUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixETBS}, trainEvaluation=${acc});
classify_method yadllEEWSUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixEEWS}, trainEvaluation=${acc});
classify_method yadllEEBSUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixEEBS}, trainEvaluation=${acc});
classify_method yadllEEDUnfiltered = SupervisedModel(model=${yadll}, data=${trainMatrixEED}, trainEvaluation=${acc});
	
classify_method yadllDCTSub = FilterDatumIndicator(method=${yadllDCTUnfiltered}, datumIndicator="ETDCT");
classify_method yadllETWSSub = FilterDatumIndicator(method=${yadllETWSUnfiltered}, datumIndicator="ETWS");
classify_method yadllETBSSub = FilterDatumIndicator(method=${yadllETBSUnfiltered}, datumIndicator="ETBS");
classify_method yadllEEWSSub = FilterDatumIndicator(method=${yadllEEWSUnfiltered}, datumIndicator="EEWS");
classify_method yadllEEBSSub = FilterDatumIndicator(method=${yadllEEBSUnfiltered}, datumIndicator="EEBS");
classify_method yadllEEDSub = FilterDatumIndicator(method=${yadllEEDUnfiltered}, datumIndicator="EED");

classify_eval devEvalDCT = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllDCTSub}, Beta="1", mode="MICRO");
classify_eval devEvalETWS = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllETWSSub}, Beta="1", mode="MICRO");
classify_eval devEvalETBS = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllETBSSub}, Beta="1", mode="MICRO");
classify_eval devEvalEEWS = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllEEWSSub}, Beta="1", mode="MICRO");
classify_eval devEvalEEBS = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllEEBSSub}, Beta="1", mode="MICRO");
classify_eval devEvalEED = F(task=${dataTlinkTypeTBD.devTask}, method=${yadllEEDSub}, Beta="1", mode="MICRO");

classify_method yadllDCT = RunClassifyMethodSearch(fn=${devEvalDCT}, search=${yadllDCTSearch});
classify_method yadllETWS = RunClassifyMethodSearch(fn=${devEvalETWS}, search=${yadllETWSSearch});
classify_method yadllETBS = RunClassifyMethodSearch(fn=${devEvalETBS}, search=${yadllETBSSearch});
classify_method yadllEEWS = RunClassifyMethodSearch(fn=${devEvalEEWS}, search=${yadllEEWSSearch});
classify_method yadllEEBS = RunClassifyMethodSearch(fn=${devEvalEEBS}, search=${yadllEEBSSearch});
classify_method yadllEED = RunClassifyMethodSearch(fn=${devEvalEED}, search=${yadllEEDSearch});
