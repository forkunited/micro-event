data trainData = TLinkType(storage="EventBson", documents="tbd_docs", tlinks="tbd_tlinks", filter=${dataTBD.devTestDocs}, filterType="EXCLUDE", labelMode="ALL", labelMapping="TBD", maxSentenceDistance="1");
data devData = TLinkType(storage="EventBson", documents="tbd_docs", tlinks="tbd_tlinks", filter=${dataTBD.devDocs}, filterType="INTERSECT", labelMode="ALL", labelMapping="TBD", maxSentenceDistance="1");
data testData = TLinkType(storage="EventBson", documents="tbd_docs", tlinks="tbd_tlinks", filter=${dataTBD.testDocs}, filterType="INTERSECT", labelMode="ALL", labelMapping="TBD", maxSentenceDistance="1");

data trainDataEE = FilterData(data=${trainData}, datumIndicator="TypeEventEvent");
data trainDataET = FilterData(data=${trainData}, datumIndicator="TypeEventTime");

data trainDataDCT = FilterData(data=${trainDataET}, datumIndicator="PositionDCT");
data trainDataETWS = FilterData(data=${trainDataET}, datumIndicator="PositionWithinSentence");
data trainDataETBS = FilterData(data=${trainDataET}, datumIndicator="PositionBetweenSentence");
data trainDataEEWS = FilterData(data=${trainDataEE}, datumIndicator="PositionWithinSentence");
data trainDataEEBS = FilterData(data=${trainDataEE}, datumIndicator="PositionBetweenSentence");
data trainDataEED = FilterData(data=${trainDataEE}, datumIndicator="PositionWithinSentenceDominant");

value ETDCTIndicator = ConjoinDatumIndicators(name="ETDCT", fns=("TypeEventTime", "PositionDCT"));
value ETWSIndicator = ConjoinDatumIndicators(name="ETWS", fns=("TypeEventTime", "PositionWithinSentence"));
value ETBSIndicator = ConjoinDatumIndicators(name="ETBS", fns=("TypeEventTime", "PositionBetweenSentence"));
value EEWSIndicator = ConjoinDatumIndicators(name="EEWS", fns=("TypeEventEvent", "PositionWithinSentence"));
value EEBSIndicator = ConjoinDatumIndicators(name="EEBS", fns=("TypeEventEvent", "PositionBetweenSentence"));
value EEDIndicator = ConjoinDatumIndicators(name="EED", fns=("TypeEventEvent", "PositionWithinSentenceDominant"));

value countTBDTLinkTypeTrainData = SizeData(data=${trainData});
value countTBDTLinkTypeDevData = SizeData(data=${devData});
value countTBDTLinkTypeTestData = SizeData(data=${testData});
value debugTrainData = OutputDebug(refs=(${countTBDTLinkTypeTrainData}));
value debugDevData = OutputDebug(refs=(${countTBDTLinkTypeDevData}));
value debugTestData = OutputDebug(refs=(${countTBDTLinkTypeTestData}));

classify_task devTask = Classification(data=${devData});
classify_task testTask = Classification(data=${testData});

structurizer docStruct = DocumentNLPGraphTLink(labelMapping="TBD");
structurizer docStructConserve = DocumentNLPGraphTLink(labelMapping="TBD", graphOverwriteOperator="CONSERVE");
structurizer docStructMulti = DocumentNLPGraphTLink(graphEdgeMode="MULTI", graphNodeMode="MULTI", labelMapping="TBD");