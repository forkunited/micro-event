context dataParamsTlinkType = TLinkType(initScript="/tlinkType/data/parameters/TBD.ctx", initOnce="true", initOverrideByName="true");
context featureSetsTlinkType = TLinkType(initScript="/tlinkType/featureSets/CAEVO_SL_Fixed.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataTlinkType = TLinkType(initScript="/tlinkType/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

data_features trainMatrixDCT = DataFeatureMatrix(data=${trainDevTestDataTlinkType.trainDataDCT}, features=${featureSetsTlinkType.fsDCT});
data_features trainMatrixETWS = DataFeatureMatrix(data=${trainDevTestDataTlinkType.trainDataETWS}, features=${featureSetsTlinkType.fsETWS});
data_features trainMatrixEEWS = DataFeatureMatrix(data=${trainDevTestDataTlinkType.trainDataEEWS}, features=${featureSetsTlinkType.fsEEWS});
data_features trainMatrixEED = DataFeatureMatrix(data=${trainDevTestDataTlinkType.trainDataEED}, features=${featureSetsTlinkType.fsEED});
data_features trainMatrixEEBS = DataFeatureMatrix(data=${trainDevTestDataTlinkType.trainDataEEBS}, features=${featureSetsTlinkType.fsEEBS});

model slDCTm=StanfordLinear() { array validLabels=${dataParamsTlinkType.labels}; };
model slETWSm=StanfordLinear() { array validLabels=${dataParamsTlinkType.labels}; };
model slEEWSm=StanfordLinear() { array validLabels=${dataParamsTlinkType.labels}; };
model slEEDm=StanfordLinear() { array validLabels=${dataParamsTlinkType.labels}; };
model slEEBSm=StanfordLinear() { array validLabels=${dataParamsTlinkType.labels}; };

evaluation acc=Accuracy();
classify_method slDCTUnfiltered = SupervisedModel(model=${slDCTm}, data=${trainMatrixDCT}, trainEvaluation=${acc});
classify_method slETWSUnfiltered = SupervisedModel(model=${slETWSm}, data=${trainMatrixETWS}, trainEvaluation=${acc});
classify_method slEEWSUnfiltered = SupervisedModel(model=${slEEWSm}, data=${trainMatrixEEWS}, trainEvaluation=${acc});
classify_method slEEDUnfiltered = SupervisedModel(model=${slEEDm}, data=${trainMatrixEED}, trainEvaluation=${acc});
classify_method slEEBSUnfiltered = SupervisedModel(model=${slEEBSm}, data=${trainMatrixEEBS}, trainEvaluation=${acc});

search l2DCT = Grid() { dimension l2=Enumerated(values=(".01", ".1", "1.0", "10.0", "100.0"), stageIndex="0"); };
search l2ETWS = Grid() { dimension l2=Enumerated(values=(".01", ".1", "1.0", "10.0", "100.0"), stageIndex="0"); };
search l2EEWS = Grid() { dimension l2=Enumerated(values=(".01", ".1", "1.0", "10.0", "100.0"), stageIndex="0"); };
search l2EED = Grid() { dimension l2=Enumerated(values=(".01", ".1", "1.0", "10.0", "100.0"), stageIndex="0"); };
search l2EEBS = Grid() { dimension l2=Enumerated(values=(".01", ".1", "1.0", "10.0", "100.0"), stageIndex="0"); };

classify_eval evalDCT = Precision(task=${trainDevTestDataTlinkType.devTask}, method=${slDCTUnfiltered}, mode="MICRO");
classify_eval evalETWS = Precision(task=${trainDevTestDataTlinkType.devTask}, method=${slETWSUnfiltered}, mode="MICRO");
classify_eval evalEEWS = Precision(task=${trainDevTestDataTlinkType.devTask}, method=${slEEWSUnfiltered}, mode="MICRO");
classify_eval evalEED = Precision(task=${trainDevTestDataTlinkType.devTask}, method=${slEEDUnfiltered}, mode="MICRO");
classify_eval evalEEBS = Precision(task=${trainDevTestDataTlinkType.devTask}, method=${slEEBSUnfiltered}, mode="MICRO");

classify_method slDCTSub = RunClassifyMethodSearch(fn=${evalDCT}, search=${l2DCT});
classify_method slETWSSub = RunClassifyMethodSearch(fn=${evalETWS}, search=${l2ETWS});
classify_method slEEWSSub = RunClassifyMethodSearch(fn=${evalEEWS}, search=${l2EEWS});
classify_method slEEDSub = RunClassifyMethodSearch(fn=${evalEED}, search=${l2EED});
classify_method slEEBSSub = RunClassifyMethodSearch(fn=${evalEEBS}, search=${l2EEBS});

classify_method slDCT = FilterDatumIndicator(method=${slDCTSub}, datumIndicator="ETDCT");
classify_method slETWS = FilterDatumIndicator(method=${slETWSSub}, datumIndicator="ETWS");
classify_method slEEWS = FilterDatumIndicator(method=${slEEWSSub}, datumIndicator="EEWS");
classify_method slEED = FilterDatumIndicator(method=${slEEDSub}, datumIndicator="EED");
classify_method slEEBS = FilterDatumIndicator(method=${slEEBSSub}, datumIndicator="EEBS");




