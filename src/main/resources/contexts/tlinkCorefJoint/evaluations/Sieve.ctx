context trainDevTestDataEventCoref = EventCoref(initScript="/corefEvent/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

context trainDevTestDataEventTLink = EventTLink(initScript="/tlinkEvent/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataEventTimeTLink = EventTimeTLink(initScript="/tlinkEventTime/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDataTimeTLink = TimeTLink(initScript="/tlinkTime/data/LoadTrainDevTest.ctx", initOnce="true", initOverrideByName="true");

context modelsJointTLinkCorefSieve = EventCoref(initScript="/tlinkCorefJoint/methods/Sieve_Ind.ctx", initOnce="true", initOverrideByName="true");

multi_classify_task multiDevTask = MultiClassification(tasks=(${trainDevTestDataEventCoref.devTask},${trainDevTestDataEventTLink.devTask},${trainDevTestDataTimeTLink.devTask},${trainDevTestDataEventTimeTLink.devTask}));
multi_classify_task multiTestTask = MultiClassification(tasks=(${trainDevTestDataEventCoref.testTask},${trainDevTestDataEventTLink.testTask},${trainDevTestDataTimeTLink.testTask},${trainDevTestDataEventTimeTLink.testTask}));

multi_classify_eval multiCorefDevPrecision = MultiPrecision(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterLabels=("COREF", "", "", ""), filterTasks=("0"));
multi_classify_eval multiCorefDevRecall = MultiRecall(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterLabels=("COREF", "", "", ""), filterTasks=("0"));
multi_classify_eval multiCorefTestPrecision = MultiPrecision(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterLabels=("COREF", "", "", ""), filterTasks=("0"));
multi_classify_eval multiCorefTestRecall = MultiRecall(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterLabels=("COREF", "", "", ""), filterTasks=("0"));

multi_classify_eval multiTLinkDevPrecision = MultiPrecision(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterTasks=("1", "2", "3"));
multi_classify_eval multiTLinkDevRecall = MultiRecall(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterTasks=("1", "2", "3"));
multi_classify_eval multiTLinkTestPrecision = MultiPrecision(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterTasks=("1", "2", "3"));
multi_classify_eval multiTLinkTestRecall = MultiRecall(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO", filterTasks=("1", "2", "3"));

multi_classify_eval multiDevPrecision = MultiPrecision(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO");
multi_classify_eval multiDevRecall = MultiRecall(task=${multiDevTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO");
multi_classify_eval multiTestPrecision = MultiPrecision(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO");
multi_classify_eval multiTestRecall = MultiRecall(task=${multiTestTask}, method=${modelsJointTLinkCorefSieve.sieve}, mode="MICRO");
