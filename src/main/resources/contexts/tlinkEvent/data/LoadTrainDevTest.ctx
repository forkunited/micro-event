context dataParamsEventTLink = TLinkType(initScript="/tlinkEvent/data/parameters/TBD.ctx", initOnce="true", initOverrideByName="true");
context trainDevTestDocsEventTLink = TLinkType(initScript="/util/data/docs/TBD.ctx", initOnce="true", initOverrideByName="true");

data trainData = TLinkType(storage="EventBson", documents=${dataParamsEventTLink.trainDocs}, tlinks=${dataParamsEventTLink.trainTlinks}, filter=${trainDevTestDocsEventTLink.devTestDocs}, filterType="EXCLUDE", labelMode=${dataParamsEventTLink.trainLabelMode}, labelMapping=${dataParamsEventTLink.trainLM}, maxSentenceDistance=${dataParamsEventTLink.trainMaxSentDist}, crossDocMode=${dataParamsEventTLink.trainCrossDocMode}, clusterMode=${dataParamsEventTLink.trainClusterMode});
data devData = TLinkType(storage="EventBson", documents=${dataParamsEventTLink.devDocs}, tlinks=${dataParamsEventTLink.devTlinks}, filter=${trainDevTestDocsEventTLink.devDocs}, filterType="INTERSECT", labelMode=${dataParamsEventTLink.devLabelMode}, labelMapping=${dataParamsEventTLink.devLM}, maxSentenceDistance=${dataParamsEventTLink.devMaxSentDist}, crossDocMode=${dataParamsEventTLink.devCrossDocMode}, clusterMode=${dataParamsEventTLink.devClusterMode});
data testData = TLinkType(storage="EventBson", documents=${dataParamsEventTLink.testDocs}, tlinks=${dataParamsEventTLink.testTlinks}, filter=${trainDevTestDocsEventTLink.testDocs}, filterType="INTERSECT", labelMode=${dataParamsEventTLink.testLabelMode}, labelMapping=${dataParamsEventTLink.testLM}, maxSentenceDistance=${dataParamsEventTLink.testMaxSentDist}, crossDocMode=${dataParamsEventTLink.testCrossDocMode}, clusterMode=${dataParamsEventTLink.testClusterMode});

data trainDataWS = FilterData(data=${trainDataET}, datumIndicator="PositionWithinSentence");
data trainDataBS = FilterData(data=${trainDataET}, datumIndicator="PositionBetweenSentence");
data trainDataD = FilterData(data=${trainDataEE}, datumIndicator="PositionWithinSentenceDominant");
data trainDataND = FilterData(data=${trainDataEE}, datumIndicator="PositionWithinSentenceNotDominant");

value ETDCTIndicator = ConjoinDatumIndicators(name="ETDCT", fns=("TypeEventTime", "PositionDCT"));
value ETWSIndicator = ConjoinDatumIndicators(name="ETWS", fns=("TypeEventTime", "PositionWithinSentence"));
value ETBSIndicator = ConjoinDatumIndicators(name="ETBS", fns=("TypeEventTime", "PositionBetweenSentence"));
value EEWSIndicator = ConjoinDatumIndicators(name="EEWS", fns=("TypeEventEvent", "PositionWithinSentence"));
value EEBSIndicator = ConjoinDatumIndicators(name="EEBS", fns=("TypeEventEvent", "PositionBetweenSentence"));
value EEDIndicator = ConjoinDatumIndicators(name="EED", fns=("TypeEventEvent", "PositionWithinSentenceDominant"));
value EENDIndicator = ConjoinDatumIndicators(name="EEND", fns=("TypeEventEvent", "PositionWithinSentenceNotDominant"));

value countTBDTLinkTypeTrainData = SizeData(data=${trainData});
value countTBDTLinkTypeDevData = SizeData(data=${devData});
value countTBDTLinkTypeTestData = SizeData(data=${testData});
value debugTrainData = OutputDebug(refs=(${countTBDTLinkTypeTrainData}));
value debugDevData = OutputDebug(refs=(${countTBDTLinkTypeDevData}));
value debugTestData = OutputDebug(refs=(${countTBDTLinkTypeTestData}));

classify_task devTask = Classification(data=${devData});
classify_task testTask = Classification(data=${testData});

structurizer docStruct = GraphTLinkByDocument(labelMapping="TBD");
structurizer docStructConserve = GraphTLinkByDocument(labelMapping="TBD", graphOverwriteOperator="CONSERVE");
structurizer docStructMulti = GraphTLinkByDocument(graphEdgeMode="MULTI", graphNodeMode="MULTI", labelMapping="TBD");

structurizer struct = GraphTLink(labelMapping="TBD");
structurizer structConserve = GraphTLink(labelMapping="TBD", graphOverwriteOperator="CONSERVE");
structurizer structMulti = GraphTLink(graphEdgeMode="MULTI", graphNodeMode="MULTI", labelMapping="TBD");